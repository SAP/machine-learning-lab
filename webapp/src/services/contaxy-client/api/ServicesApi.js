/**
 * Contaxy API
 * Functionality to create and manage projects, services, jobs, and files.
 *
 * The version of the OpenAPI document: 0.0.21
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProblemDetails from '../model/ProblemDetails';
import ResourceAction from '../model/ResourceAction';
import ResourceActionExecution from '../model/ResourceActionExecution';
import Service from '../model/Service';
import ServiceInput from '../model/ServiceInput';
import ServiceUpdate from '../model/ServiceUpdate';

/**
 * Services service.
 * @module api/ServicesApi
 * @version 0.0.21
 */
export default class ServicesApi {
  /**
   * Constructs a new ServicesApi.
   * @alias module:api/ServicesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Delete a service.
   * Deletes a service.  This will kill and remove the container and all associated deployment artifacts.
   * @param {String} projectId A valid project ID.
   * @param {String} serviceId A valid Service ID.
   * @param {Object} opts Optional parameters
   * @param {Boolean} opts.deleteVolumes Delete all volumes associated with the deployment. (default to false)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteServiceWithHttpInfo(projectId, serviceId, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error(
        "Missing the required parameter 'projectId' when calling deleteService"
      );
    }
    // verify the required parameter 'serviceId' is set
    if (serviceId === undefined || serviceId === null) {
      throw new Error(
        "Missing the required parameter 'serviceId' when calling deleteService"
      );
    }

    let pathParams = {
      project_id: projectId,
      service_id: serviceId,
    };
    let queryParams = {
      delete_volumes: opts['deleteVolumes'],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [
      'APIKeyCookie',
      'APIKeyHeader',
      'APIKeyQuery',
      'OAuth2PasswordBearer',
    ];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = null;
    return this.apiClient.callApi(
      '/projects/{project_id}/services/{service_id}',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete a service.
   * Deletes a service.  This will kill and remove the container and all associated deployment artifacts.
   * @param {String} projectId A valid project ID.
   * @param {String} serviceId A valid Service ID.
   * @param {Object} opts Optional parameters
   * @param {Boolean} opts.deleteVolumes Delete all volumes associated with the deployment. (default to false)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteService(projectId, serviceId, opts) {
    return this.deleteServiceWithHttpInfo(projectId, serviceId, opts).then(
      function (response_and_data) {
        return response_and_data.data;
      }
    );
  }

  /**
   * Delete all services.
   * Deletes all services associated with a project.
   * @param {String} projectId A valid project ID.
   * @param {Object} opts Optional parameters
   * @param {String} opts.extensionId Extension ID. If not specified, the system will decide. Use `core` to explicitly select the core platform.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteServicesWithHttpInfo(projectId, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error(
        "Missing the required parameter 'projectId' when calling deleteServices"
      );
    }

    let pathParams = {
      project_id: projectId,
    };
    let queryParams = {
      extension_id: opts['extensionId'],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [
      'APIKeyCookie',
      'APIKeyHeader',
      'APIKeyQuery',
      'OAuth2PasswordBearer',
    ];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = null;
    return this.apiClient.callApi(
      '/projects/{project_id}/services',
      'DELETE',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Delete all services.
   * Deletes all services associated with a project.
   * @param {String} projectId A valid project ID.
   * @param {Object} opts Optional parameters
   * @param {String} opts.extensionId Extension ID. If not specified, the system will decide. Use `core` to explicitly select the core platform.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteServices(projectId, opts) {
    return this.deleteServicesWithHttpInfo(projectId, opts).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * Deploy a service.
   * Deploy a service for the specified project.  If no `action_id` is provided, the system will automatically select the best deployment option.  Available deployment options (actions) can be requested via the [list_deploy_service_actions](#services/list_deploy_service_actions) operation. If the action is from an extension, the `action_id` must be a composite ID with the following format: `{extension_id}~{action_id}`.  The action mechanism is further explained in the description of the [list_deploy_service_actions](#services/list_deploy_service_actions).
   * @param {String} projectId A valid project ID.
   * @param {module:model/ServiceInput} serviceInput
   * @param {Object} opts Optional parameters
   * @param {String} opts.actionId The action ID from the service deploy options.
   * @param {Boolean} opts.wait If true, the server waits for the service to be ready before sending a response. (default to false)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Service} and HTTP response
   */
  deployServiceWithHttpInfo(projectId, serviceInput, opts) {
    opts = opts || {};
    let postBody = serviceInput;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error(
        "Missing the required parameter 'projectId' when calling deployService"
      );
    }
    // verify the required parameter 'serviceInput' is set
    if (serviceInput === undefined || serviceInput === null) {
      throw new Error(
        "Missing the required parameter 'serviceInput' when calling deployService"
      );
    }

    let pathParams = {
      project_id: projectId,
    };
    let queryParams = {
      action_id: opts['actionId'],
      wait: opts['wait'],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [
      'APIKeyCookie',
      'APIKeyHeader',
      'APIKeyQuery',
      'OAuth2PasswordBearer',
    ];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = Service;
    return this.apiClient.callApi(
      '/projects/{project_id}/services',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Deploy a service.
   * Deploy a service for the specified project.  If no `action_id` is provided, the system will automatically select the best deployment option.  Available deployment options (actions) can be requested via the [list_deploy_service_actions](#services/list_deploy_service_actions) operation. If the action is from an extension, the `action_id` must be a composite ID with the following format: `{extension_id}~{action_id}`.  The action mechanism is further explained in the description of the [list_deploy_service_actions](#services/list_deploy_service_actions).
   * @param {String} projectId A valid project ID.
   * @param {module:model/ServiceInput} serviceInput
   * @param {Object} opts Optional parameters
   * @param {String} opts.actionId The action ID from the service deploy options.
   * @param {Boolean} opts.wait If true, the server waits for the service to be ready before sending a response. (default to false)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Service}
   */
  deployService(projectId, serviceInput, opts) {
    return this.deployServiceWithHttpInfo(projectId, serviceInput, opts).then(
      function (response_and_data) {
        return response_and_data.data;
      }
    );
  }

  /**
   * Execute a service action.
   * Executes the selected service action.  The actions need to be first requested from the [list_service_actions](#services/list_service_actions) operation. If the action is from an extension, the `action_id` must be a composite ID with the following format: `{extension_id}~{action_id}`.  The action mechanism is further explained in the description of the [list_service_actions](#services/list_service_actions).
   * @param {String} projectId A valid project ID.
   * @param {String} serviceId A valid Service ID.
   * @param {String} actionId The action ID from the list_service_actions operation.
   * @param {Object} opts Optional parameters
   * @param {module:model/ResourceActionExecution} opts.resourceActionExecution
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
   */
  executeServiceActionWithHttpInfo(projectId, serviceId, actionId, opts) {
    opts = opts || {};
    let postBody = opts['resourceActionExecution'];
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error(
        "Missing the required parameter 'projectId' when calling executeServiceAction"
      );
    }
    // verify the required parameter 'serviceId' is set
    if (serviceId === undefined || serviceId === null) {
      throw new Error(
        "Missing the required parameter 'serviceId' when calling executeServiceAction"
      );
    }
    // verify the required parameter 'actionId' is set
    if (actionId === undefined || actionId === null) {
      throw new Error(
        "Missing the required parameter 'actionId' when calling executeServiceAction"
      );
    }

    let pathParams = {
      project_id: projectId,
      service_id: serviceId,
      action_id: actionId,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [
      'APIKeyCookie',
      'APIKeyHeader',
      'APIKeyQuery',
      'OAuth2PasswordBearer',
    ];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = Object;
    return this.apiClient.callApi(
      '/projects/{project_id}/services/{service_id}/actions/{action_id}',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Execute a service action.
   * Executes the selected service action.  The actions need to be first requested from the [list_service_actions](#services/list_service_actions) operation. If the action is from an extension, the `action_id` must be a composite ID with the following format: `{extension_id}~{action_id}`.  The action mechanism is further explained in the description of the [list_service_actions](#services/list_service_actions).
   * @param {String} projectId A valid project ID.
   * @param {String} serviceId A valid Service ID.
   * @param {String} actionId The action ID from the list_service_actions operation.
   * @param {Object} opts Optional parameters
   * @param {module:model/ResourceActionExecution} opts.resourceActionExecution
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
   */
  executeServiceAction(projectId, serviceId, actionId, opts) {
    return this.executeServiceActionWithHttpInfo(
      projectId,
      serviceId,
      actionId,
      opts
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Get service access token.
   * Returns an API token with permission to access the service endpoints.  This token is read-only (permission level read) and does not allow any other permission such as deleting or updating the service. The token can be deleted (revoked) at any time.
   * @param {String} projectId A valid project ID.
   * @param {String} serviceId A valid Service ID.
   * @param {Object} opts Optional parameters
   * @param {String} opts.endpoint If specified, the token only allows access to this endpoint.
   * @param {String} opts.description Attach a short description to the generated token.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
   */
  getServiceAccessTokenWithHttpInfo(projectId, serviceId, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error(
        "Missing the required parameter 'projectId' when calling getServiceAccessToken"
      );
    }
    // verify the required parameter 'serviceId' is set
    if (serviceId === undefined || serviceId === null) {
      throw new Error(
        "Missing the required parameter 'serviceId' when calling getServiceAccessToken"
      );
    }

    let pathParams = {
      project_id: projectId,
      service_id: serviceId,
    };
    let queryParams = {
      endpoint: opts['endpoint'],
      description: opts['description'],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [
      'APIKeyCookie',
      'APIKeyHeader',
      'APIKeyQuery',
      'OAuth2PasswordBearer',
    ];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = 'String';
    return this.apiClient.callApi(
      '/projects/{project_id}/services/{service_id}/token',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get service access token.
   * Returns an API token with permission to access the service endpoints.  This token is read-only (permission level read) and does not allow any other permission such as deleting or updating the service. The token can be deleted (revoked) at any time.
   * @param {String} projectId A valid project ID.
   * @param {String} serviceId A valid Service ID.
   * @param {Object} opts Optional parameters
   * @param {String} opts.endpoint If specified, the token only allows access to this endpoint.
   * @param {String} opts.description Attach a short description to the generated token.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
   */
  getServiceAccessToken(projectId, serviceId, opts) {
    return this.getServiceAccessTokenWithHttpInfo(
      projectId,
      serviceId,
      opts
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Get service access token.
   * Returns an API token with permission to access the service endpoints.  This token is read-only (permission level read) and does not allow any other permission such as deleting or updating the service. The token can be deleted (revoked) at any time.
   * @param {String} projectId A valid project ID.
   * @param {String} serviceId A valid Service ID.
   * @param {Object} opts Optional parameters
   * @param {String} opts.endpoint If specified, the token only allows access to this endpoint.
   * @param {String} opts.description Attach a short description to the generated token.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
   */
  getServiceAccessToken_0WithHttpInfo(projectId, serviceId, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error(
        "Missing the required parameter 'projectId' when calling getServiceAccessToken_0"
      );
    }
    // verify the required parameter 'serviceId' is set
    if (serviceId === undefined || serviceId === null) {
      throw new Error(
        "Missing the required parameter 'serviceId' when calling getServiceAccessToken_0"
      );
    }

    let pathParams = {
      project_id: projectId,
      service_id: serviceId,
    };
    let queryParams = {
      endpoint: opts['endpoint'],
      description: opts['description'],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [
      'APIKeyCookie',
      'APIKeyHeader',
      'APIKeyQuery',
      'OAuth2PasswordBearer',
    ];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = 'String';
    return this.apiClient.callApi(
      '/projects/{project_id}/services/{service_id}/token',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get service access token.
   * Returns an API token with permission to access the service endpoints.  This token is read-only (permission level read) and does not allow any other permission such as deleting or updating the service. The token can be deleted (revoked) at any time.
   * @param {String} projectId A valid project ID.
   * @param {String} serviceId A valid Service ID.
   * @param {Object} opts Optional parameters
   * @param {String} opts.endpoint If specified, the token only allows access to this endpoint.
   * @param {String} opts.description Attach a short description to the generated token.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
   */
  getServiceAccessToken_0(projectId, serviceId, opts) {
    return this.getServiceAccessToken_0WithHttpInfo(
      projectId,
      serviceId,
      opts
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Get service logs.
   * Returns the stdout/stderr logs of the service.
   * @param {String} projectId A valid project ID.
   * @param {String} serviceId A valid Service ID.
   * @param {Object} opts Optional parameters
   * @param {Number} opts.lines Only show the last n lines.
   * @param {Date} opts.since Only show the logs generated after a given date.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
   */
  getServiceLogsWithHttpInfo(projectId, serviceId, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error(
        "Missing the required parameter 'projectId' when calling getServiceLogs"
      );
    }
    // verify the required parameter 'serviceId' is set
    if (serviceId === undefined || serviceId === null) {
      throw new Error(
        "Missing the required parameter 'serviceId' when calling getServiceLogs"
      );
    }

    let pathParams = {
      project_id: projectId,
      service_id: serviceId,
    };
    let queryParams = {
      lines: opts['lines'],
      since: opts['since'],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [
      'APIKeyCookie',
      'APIKeyHeader',
      'APIKeyQuery',
      'OAuth2PasswordBearer',
    ];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = 'String';
    return this.apiClient.callApi(
      '/projects/{project_id}/services/{service_id}/logs',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get service logs.
   * Returns the stdout/stderr logs of the service.
   * @param {String} projectId A valid project ID.
   * @param {String} serviceId A valid Service ID.
   * @param {Object} opts Optional parameters
   * @param {Number} opts.lines Only show the last n lines.
   * @param {Date} opts.since Only show the logs generated after a given date.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
   */
  getServiceLogs(projectId, serviceId, opts) {
    return this.getServiceLogsWithHttpInfo(projectId, serviceId, opts).then(
      function (response_and_data) {
        return response_and_data.data;
      }
    );
  }

  /**
   * Get service metadata.
   * Returns the metadata of a single service.  The returned metadata might be filtered based on the permission level of the authenticated user.
   * @param {String} projectId A valid project ID.
   * @param {String} serviceId A valid Service ID.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Service} and HTTP response
   */
  getServiceMetadataWithHttpInfo(projectId, serviceId) {
    let postBody = null;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error(
        "Missing the required parameter 'projectId' when calling getServiceMetadata"
      );
    }
    // verify the required parameter 'serviceId' is set
    if (serviceId === undefined || serviceId === null) {
      throw new Error(
        "Missing the required parameter 'serviceId' when calling getServiceMetadata"
      );
    }

    let pathParams = {
      project_id: projectId,
      service_id: serviceId,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [
      'APIKeyCookie',
      'APIKeyHeader',
      'APIKeyQuery',
      'OAuth2PasswordBearer',
    ];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = Service;
    return this.apiClient.callApi(
      '/projects/{project_id}/services/{service_id}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Get service metadata.
   * Returns the metadata of a single service.  The returned metadata might be filtered based on the permission level of the authenticated user.
   * @param {String} projectId A valid project ID.
   * @param {String} serviceId A valid Service ID.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Service}
   */
  getServiceMetadata(projectId, serviceId) {
    return this.getServiceMetadataWithHttpInfo(projectId, serviceId).then(
      function (response_and_data) {
        return response_and_data.data;
      }
    );
  }

  /**
   * List deploy service actions.
   * Lists all available service deployment options (actions).  The returned action IDs should be used when calling the [deploy_service](#services/deploy_service) operation.  The action mechanism allows extensions to provide additional deployment options for a service based on the provided configuration. It works the following way:  1. The user requests all available deployment options via the [list_deploy_service_actions](#services/list_deploy_service_actions) operation. 2. The operation will be forwarded to all installed extensions that have implemented the [list_deploy_service_actions](#services/list_deploy_service_actions) operation. 3. Extensions can run arbitrary code based on the provided service configuration and return a list of actions with self-defined action IDs. 4. The user selects one of those actions and triggers the [deploy_service](#services/deploy_service) operation by providing the selected action ID. The `action_id` from an extension contains the extension ID. 5. The operation is forwarded to the selected extension, which can run arbitrary code to deploy the service based on the provided configuration. 6. The return value of the operation should be a `Service` object.  The same action mechanism is also used for other type of actions on resources.
   * @param {String} projectId A valid project ID.
   * @param {module:model/ServiceInput} serviceInput
   * @param {Object} opts Optional parameters
   * @param {String} opts.extensionId Extension ID. If not specified, the system will decide. Use `core` to explicitly select the core platform.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ResourceAction>} and HTTP response
   */
  listDeployServiceActionsWithHttpInfo(projectId, serviceInput, opts) {
    opts = opts || {};
    let postBody = serviceInput;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error(
        "Missing the required parameter 'projectId' when calling listDeployServiceActions"
      );
    }
    // verify the required parameter 'serviceInput' is set
    if (serviceInput === undefined || serviceInput === null) {
      throw new Error(
        "Missing the required parameter 'serviceInput' when calling listDeployServiceActions"
      );
    }

    let pathParams = {
      project_id: projectId,
    };
    let queryParams = {
      extension_id: opts['extensionId'],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [
      'APIKeyCookie',
      'APIKeyHeader',
      'APIKeyQuery',
      'OAuth2PasswordBearer',
    ];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = [ResourceAction];
    return this.apiClient.callApi(
      '/projects/{project_id}/services:deploy-actions',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * List deploy service actions.
   * Lists all available service deployment options (actions).  The returned action IDs should be used when calling the [deploy_service](#services/deploy_service) operation.  The action mechanism allows extensions to provide additional deployment options for a service based on the provided configuration. It works the following way:  1. The user requests all available deployment options via the [list_deploy_service_actions](#services/list_deploy_service_actions) operation. 2. The operation will be forwarded to all installed extensions that have implemented the [list_deploy_service_actions](#services/list_deploy_service_actions) operation. 3. Extensions can run arbitrary code based on the provided service configuration and return a list of actions with self-defined action IDs. 4. The user selects one of those actions and triggers the [deploy_service](#services/deploy_service) operation by providing the selected action ID. The `action_id` from an extension contains the extension ID. 5. The operation is forwarded to the selected extension, which can run arbitrary code to deploy the service based on the provided configuration. 6. The return value of the operation should be a `Service` object.  The same action mechanism is also used for other type of actions on resources.
   * @param {String} projectId A valid project ID.
   * @param {module:model/ServiceInput} serviceInput
   * @param {Object} opts Optional parameters
   * @param {String} opts.extensionId Extension ID. If not specified, the system will decide. Use `core` to explicitly select the core platform.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ResourceAction>}
   */
  listDeployServiceActions(projectId, serviceInput, opts) {
    return this.listDeployServiceActionsWithHttpInfo(
      projectId,
      serviceInput,
      opts
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * List service actions.
   * Lists all actions available for the specified service.  The returned action IDs should be used when calling the [execute_service_action](#services/execute_service_action) operation.  The action mechanism allows extensions to provide additional functionality on services. It works the following way:  1. The user requests all available actions via the [list_service_actions](#services/list_service_actions) operation. 2. The operation will be forwarded to all installed extensions that have implemented the [list_service_actions](#services/list_service_actions) operation. 3. Extensions can run arbitrary code - e.g., request and check the service metadata for compatibility - and return a list of actions with self-defined action IDs. 4. The user selects one of those actions and triggers the [execute_service_action](#services/execute_service_action) operation by providing the selected action ID.  The `action_id` from an extension contains the extension ID. 5. The operation is forwarded to the selected extension, which can run arbitrary code to execute the selected action. 6. The return value of the operation can be either a simple message (shown to the user) or a redirect to another URL (e.g., to show a web UI).  The same action mechanism is also used for other resources (e.g., files, jobs). It can support a very broad set of use-cases, for example: Access to service endpoints, dashboards for monitoring, administration tools, and more...
   * @param {String} projectId A valid project ID.
   * @param {String} serviceId A valid Service ID.
   * @param {Object} opts Optional parameters
   * @param {String} opts.extensionId Extension ID. If not specified, the system will decide. Use `core` to explicitly select the core platform.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ResourceAction>} and HTTP response
   */
  listServiceActionsWithHttpInfo(projectId, serviceId, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error(
        "Missing the required parameter 'projectId' when calling listServiceActions"
      );
    }
    // verify the required parameter 'serviceId' is set
    if (serviceId === undefined || serviceId === null) {
      throw new Error(
        "Missing the required parameter 'serviceId' when calling listServiceActions"
      );
    }

    let pathParams = {
      project_id: projectId,
      service_id: serviceId,
    };
    let queryParams = {
      extension_id: opts['extensionId'],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [
      'APIKeyCookie',
      'APIKeyHeader',
      'APIKeyQuery',
      'OAuth2PasswordBearer',
    ];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = [ResourceAction];
    return this.apiClient.callApi(
      '/projects/{project_id}/services/{service_id}/actions',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * List service actions.
   * Lists all actions available for the specified service.  The returned action IDs should be used when calling the [execute_service_action](#services/execute_service_action) operation.  The action mechanism allows extensions to provide additional functionality on services. It works the following way:  1. The user requests all available actions via the [list_service_actions](#services/list_service_actions) operation. 2. The operation will be forwarded to all installed extensions that have implemented the [list_service_actions](#services/list_service_actions) operation. 3. Extensions can run arbitrary code - e.g., request and check the service metadata for compatibility - and return a list of actions with self-defined action IDs. 4. The user selects one of those actions and triggers the [execute_service_action](#services/execute_service_action) operation by providing the selected action ID.  The `action_id` from an extension contains the extension ID. 5. The operation is forwarded to the selected extension, which can run arbitrary code to execute the selected action. 6. The return value of the operation can be either a simple message (shown to the user) or a redirect to another URL (e.g., to show a web UI).  The same action mechanism is also used for other resources (e.g., files, jobs). It can support a very broad set of use-cases, for example: Access to service endpoints, dashboards for monitoring, administration tools, and more...
   * @param {String} projectId A valid project ID.
   * @param {String} serviceId A valid Service ID.
   * @param {Object} opts Optional parameters
   * @param {String} opts.extensionId Extension ID. If not specified, the system will decide. Use `core` to explicitly select the core platform.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ResourceAction>}
   */
  listServiceActions(projectId, serviceId, opts) {
    return this.listServiceActionsWithHttpInfo(projectId, serviceId, opts).then(
      function (response_and_data) {
        return response_and_data.data;
      }
    );
  }

  /**
   * List project services.
   * Lists all services associated with the given project.
   * @param {String} projectId A valid project ID.
   * @param {Object} opts Optional parameters
   * @param {String} opts.extensionId Extension ID. If not specified, the system will decide. Use `core` to explicitly select the core platform.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Service>} and HTTP response
   */
  listServicesWithHttpInfo(projectId, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error(
        "Missing the required parameter 'projectId' when calling listServices"
      );
    }

    let pathParams = {
      project_id: projectId,
    };
    let queryParams = {
      extension_id: opts['extensionId'],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [
      'APIKeyCookie',
      'APIKeyHeader',
      'APIKeyQuery',
      'OAuth2PasswordBearer',
    ];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = [Service];
    return this.apiClient.callApi(
      '/projects/{project_id}/services',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * List project services.
   * Lists all services associated with the given project.
   * @param {String} projectId A valid project ID.
   * @param {Object} opts Optional parameters
   * @param {String} opts.extensionId Extension ID. If not specified, the system will decide. Use `core` to explicitly select the core platform.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Service>}
   */
  listServices(projectId, opts) {
    return this.listServicesWithHttpInfo(projectId, opts).then(function (
      response_and_data
    ) {
      return response_and_data.data;
    });
  }

  /**
   * Suggest service configuration.
   * Suggests an input configuration based on the provided `container_image`.  The suggestion is based on metadata extracted from the container image (e.g. labels) as well as suggestions based on previous project deployments with the same image.
   * @param {String} projectId A valid project ID.
   * @param {String} containerImage Container image to use for suggestion.
   * @param {Object} opts Optional parameters
   * @param {String} opts.extensionId Extension ID. If not specified, the system will decide. Use `core` to explicitly select the core platform.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ServiceInput} and HTTP response
   */
  suggestServiceConfigWithHttpInfo(projectId, containerImage, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error(
        "Missing the required parameter 'projectId' when calling suggestServiceConfig"
      );
    }
    // verify the required parameter 'containerImage' is set
    if (containerImage === undefined || containerImage === null) {
      throw new Error(
        "Missing the required parameter 'containerImage' when calling suggestServiceConfig"
      );
    }

    let pathParams = {
      project_id: projectId,
    };
    let queryParams = {
      container_image: containerImage,
      extension_id: opts['extensionId'],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [
      'APIKeyCookie',
      'APIKeyHeader',
      'APIKeyQuery',
      'OAuth2PasswordBearer',
    ];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = ServiceInput;
    return this.apiClient.callApi(
      '/projects/{project_id}/services:suggest-config',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Suggest service configuration.
   * Suggests an input configuration based on the provided `container_image`.  The suggestion is based on metadata extracted from the container image (e.g. labels) as well as suggestions based on previous project deployments with the same image.
   * @param {String} projectId A valid project ID.
   * @param {String} containerImage Container image to use for suggestion.
   * @param {Object} opts Optional parameters
   * @param {String} opts.extensionId Extension ID. If not specified, the system will decide. Use `core` to explicitly select the core platform.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ServiceInput}
   */
  suggestServiceConfig(projectId, containerImage, opts) {
    return this.suggestServiceConfigWithHttpInfo(
      projectId,
      containerImage,
      opts
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Update a service.
   * Updates a service.  This might force a recreation of the underlying container.
   * @param {String} projectId A valid project ID.
   * @param {String} serviceId A valid Service ID.
   * @param {module:model/ServiceUpdate} serviceUpdate
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Service} and HTTP response
   */
  updateServiceWithHttpInfo(projectId, serviceId, serviceUpdate) {
    let postBody = serviceUpdate;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error(
        "Missing the required parameter 'projectId' when calling updateService"
      );
    }
    // verify the required parameter 'serviceId' is set
    if (serviceId === undefined || serviceId === null) {
      throw new Error(
        "Missing the required parameter 'serviceId' when calling updateService"
      );
    }
    // verify the required parameter 'serviceUpdate' is set
    if (serviceUpdate === undefined || serviceUpdate === null) {
      throw new Error(
        "Missing the required parameter 'serviceUpdate' when calling updateService"
      );
    }

    let pathParams = {
      project_id: projectId,
      service_id: serviceId,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [
      'APIKeyCookie',
      'APIKeyHeader',
      'APIKeyQuery',
      'OAuth2PasswordBearer',
    ];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = Service;
    return this.apiClient.callApi(
      '/projects/{project_id}/services/{service_id}',
      'PATCH',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Update a service.
   * Updates a service.  This might force a recreation of the underlying container.
   * @param {String} projectId A valid project ID.
   * @param {String} serviceId A valid Service ID.
   * @param {module:model/ServiceUpdate} serviceUpdate
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Service}
   */
  updateService(projectId, serviceId, serviceUpdate) {
    return this.updateServiceWithHttpInfo(
      projectId,
      serviceId,
      serviceUpdate
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Update a service.
   * Update the last access information of the service to the current time and calling user.
   * @param {String} projectId A valid project ID.
   * @param {String} serviceId A valid Service ID.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  updateServiceAccessWithHttpInfo(projectId, serviceId) {
    let postBody = null;
    // verify the required parameter 'projectId' is set
    if (projectId === undefined || projectId === null) {
      throw new Error(
        "Missing the required parameter 'projectId' when calling updateServiceAccess"
      );
    }
    // verify the required parameter 'serviceId' is set
    if (serviceId === undefined || serviceId === null) {
      throw new Error(
        "Missing the required parameter 'serviceId' when calling updateServiceAccess"
      );
    }

    let pathParams = {
      project_id: projectId,
      service_id: serviceId,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [
      'APIKeyCookie',
      'APIKeyHeader',
      'APIKeyQuery',
      'OAuth2PasswordBearer',
    ];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = null;
    return this.apiClient.callApi(
      '/projects/{project_id}/services/{service_id}:update-service-access',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Update a service.
   * Update the last access information of the service to the current time and calling user.
   * @param {String} projectId A valid project ID.
   * @param {String} serviceId A valid Service ID.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  updateServiceAccess(projectId, serviceId) {
    return this.updateServiceAccessWithHttpInfo(projectId, serviceId).then(
      function (response_and_data) {
        return response_and_data.data;
      }
    );
  }
}
