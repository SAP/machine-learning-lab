# NOTE: entrypoint.sh modifies the nginx configuration, for example substituting variables such as $CONTAXY_BASE_URL! Check it out in for more details / insights.

# Log errors to stdout
error_log /dev/stdout warn;

# Make njs available for nginx
load_module modules/ngx_http_js_module.so;

# Give nginx access to the JWT_TOKEN_SECRET environment variable,
# which is needed by the njs script to verify the JWT signature
env JWT_TOKEN_SECRET;

worker_processes 2;

events {
    # Default is 512; increase if a respective connection error shows up in nginx logs.
    worker_connections 512;
}
http {

    js_import auth from js/auth.js;

    # if SERVICE_SSL_ENABLED flag is set, following lines are commented in and the path to the certs is set
    # ssl_certificate ${SSL_CERTIFICATE_PATH};
    # ssl_certificate_key ${SSL_CERTIFICATE_KEY_PATH};

    log_format nginx '$remote_addr - $remote_user [$time_local] '
                 '"$request" $status $body_bytes_sent $request_length $request_time $upstream_response_time '
                 '"$http_referer" "$http_user_agent"';
    access_log /var/log/nginx/contaxy.log nginx;

    client_header_timeout 120s;

    proxy_connect_timeout 600;
    proxy_send_timeout 600;
    proxy_read_timeout 600;
    send_timeout 600;

    # js_set $is_authorized auth.isAuthorized;

    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    # server that listens on http and not on https.
    server {
        listen 127.0.0.1:7091; # only listen on localhost

        location = /ping {
            auth_basic off;
            return 200;
        }
     }

    server {
        listen 80;
        # if SERVICE_SSL_ENABLED flag is set, server is listening on 443 for https
        # listen 443 ssl;
        charset utf-8;

        error_page 502 504 /5xx.html;
        error_page 401 /401.html;
        # Website was accessed via http, redirect to https:
        error_page 497 https://$http_host$request_uri;

        # variables modified during run.py-execution
        set $system_namespace ${SYSTEM_NAMESPACE}; # the system_namespace will be modified in the run.py
        set $service_suffix ${SERVICE_SUFFIX}; # used to resolve services correctly; in Kubernetes, the full-qualified name has to be given. It includes the cluster namespace
        set $admin $system_namespace-service-admin$service_suffix:9000;

        client_max_body_size 1G;
        client_body_timeout 300s;

        location = ${CONTAXY_BASE_URL}/5xx.html {
            root /resources/;
            rewrite ^${CONTAXY_BASE_URL}(.*) $1 break;
            internal;
        }

        location = ${CONTAXY_BASE_URL}/401.html {
            root /resources/;
            rewrite ^${CONTAXY_BASE_URL}(.*) $1 break;
            internal;
        }

        # The FastAPI endpoints should be accessible via /api
        location ${CONTAXY_BASE_URL}/api {
            include /etc/nginx/snippets/backend-location.conf;
            # rewrite as FastAPI itself does not know about the prefix part
            rewrite ^${CONTAXY_BASE_URL}/api(.*)$ $1 break;
        }

        location ~* ${CONTAXY_BASE_URL}/api/projects/.*/files/.* {
            client_max_body_size 100G;
            client_body_timeout 600s;

            include /etc/nginx/snippets/backend-location.conf;
            rewrite ^${CONTAXY_BASE_URL}/api(.*)$ $1 break;
        }

        location ~* ${CONTAXY_BASE_URL}/api/projects/.*/multipart-upload {
            client_max_body_size 100G;
            client_body_timeout 600s;

            include /etc/nginx/snippets/backend-location.conf;
            rewrite ^${CONTAXY_BASE_URL}/api(.*)$ $1 break;
        }

        location ${CONTAXY_BASE_URL}/ {
            return 301 $scheme://$http_host${CONTAXY_BASE_URL}/app;
        }

        # without this location directive, the web app path fails to resolve if it does not have a trailing slash
        location = ${CONTAXY_BASE_URL}/app {
            return 301 $scheme://$http_host$request_uri/;
        }

        # Serve webapp directly from nginx instead of the backend API
        location ${CONTAXY_BASE_URL}/app/ {
            include  /etc/nginx/mime.types;
            alias /resources/webapp/;
        }

        location = ${CONTAXY_BASE_URL}/healthy {
            auth_basic off;
            return 200;
        }

        location = ${CONTAXY_BASE_URL}/ping {
            auth_basic off;
            return 200;
        }

        # returns the name of the container which responded. Enable testing whether requests are distributed among scaled containers
        location = ${CONTAXY_BASE_URL}/hostinfo {
            add_header Content-Type text/plain;
            return 200 $hostname;
        }

        # project-services
        location ~* ^${CONTAXY_BASE_URL}/projects/(?<project_id>[a-zA-Z0-9\-]+)/services/(?<service_id>[a-zA-Z0-9\-]+)/access/(?<extended_endpoint>(?<endpoint>[0-9]+)b?) {
            resolver ${RESOLVER}; # use Docker's DNS entries
            set $permission 'projects/$project_id/services/$service_id/access/$endpoint#read';
            js_content auth.guardServiceAccess;
        }

        location @service {
            include /etc/nginx/snippets/service-location.conf;
        }
    }
}
